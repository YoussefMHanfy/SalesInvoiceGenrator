/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.Controller;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import model.InvoiceHeader;
import model.Item;

/**
 *
 * @author Hanfy
 */
public class InvoiceFream extends javax.swing.JFrame {

    /**
     * Creates new form InvoiceFream
     */
    public InvoiceFream() {
        controller = new Controller(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        InvoiceTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();
        NewInvBtn = new javax.swing.JButton();
        NewInvBtn.addActionListener(controller);
        DeleteInvBtn = new javax.swing.JButton();
        DeleteInvBtn.addActionListener(controller);
        SaveItemBtn = new javax.swing.JButton();
        SaveItemBtn.addActionListener(controller);
        DeleteItemBtn = new javax.swing.JButton();
        DeleteItemBtn.addActionListener(controller);
        InvNumlbl = new javax.swing.JLabel();
        InvDatelbl = new javax.swing.JLabel();
        CustNamelbl = new javax.swing.JLabel();
        InvTotallbl = new javax.swing.JLabel();
        InvTablelbl = new javax.swing.JLabel();
        InvItemslbl = new javax.swing.JLabel();
        Namelbl = new javax.swing.JLabel();
        Datelbl = new javax.swing.JLabel();
        Numlbl = new javax.swing.JLabel();
        Totallbl = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loadMI = new javax.swing.JMenuItem();
        loadMI.addActionListener(controller);
        saveMI = new javax.swing.JMenuItem();
        saveMI.addActionListener(controller);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InvoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Customer", "Date", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        InvoiceTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(InvoiceTable);
        InvoiceTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Item price", "Count", "Total"
            }
        ));
        jScrollPane2.setViewportView(ItemTable);

        NewInvBtn.setText("Creat New Invoice");

        DeleteInvBtn.setText("Delete Invoice");

        SaveItemBtn.setText("Save");

        DeleteItemBtn.setText("Delete");

        InvNumlbl.setText("Invoice Num");

        InvDatelbl.setText("Invoice Date");

        CustNamelbl.setText("Customer Name");

        InvTotallbl.setText("Invoice Total");

        InvTablelbl.setText("Invoices Table");

        InvItemslbl.setText("Invoices Items");

        Namelbl.setText(".");

        Datelbl.setText(".");

        Numlbl.setText(".");

        Totallbl.setText(".");

        jMenu1.setText("File");

        loadMI.setText("load file");
        jMenu1.add(loadMI);

        saveMI.setText("save file");
        jMenu1.add(saveMI);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InvTablelbl)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(InvNumlbl)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Numlbl))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(InvDatelbl)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Datelbl))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(CustNamelbl)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(Namelbl)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(InvTotallbl)
                                        .addGap(24, 24, 24)
                                        .addComponent(Totallbl))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addComponent(SaveItemBtn)
                                        .addGap(52, 52, 52)
                                        .addComponent(DeleteItemBtn))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(InvItemslbl)))
                        .addGap(0, 12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NewInvBtn)
                        .addGap(26, 26, 26)
                        .addComponent(DeleteInvBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InvNumlbl)
                    .addComponent(InvTablelbl)
                    .addComponent(Numlbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InvDatelbl)
                            .addComponent(Datelbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CustNamelbl)
                            .addComponent(Namelbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InvTotallbl)
                            .addComponent(Totallbl))
                        .addGap(18, 18, 18)
                        .addComponent(InvItemslbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewInvBtn)
                    .addComponent(DeleteInvBtn)
                    .addComponent(SaveItemBtn)
                    .addComponent(DeleteItemBtn))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvoiceFream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvoiceFream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvoiceFream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvoiceFream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceFream().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CustNamelbl;
    private javax.swing.JLabel Datelbl;
    private javax.swing.JButton DeleteInvBtn;
    private javax.swing.JButton DeleteItemBtn;
    private javax.swing.JLabel InvDatelbl;
    private javax.swing.JLabel InvItemslbl;
    private javax.swing.JLabel InvNumlbl;
    private javax.swing.JLabel InvTablelbl;
    private javax.swing.JLabel InvTotallbl;
    protected javax.swing.JTable InvoiceTable;
    private javax.swing.JTable ItemTable;
    private javax.swing.JLabel Namelbl;
    private javax.swing.JButton NewInvBtn;
    private javax.swing.JLabel Numlbl;
    private javax.swing.JButton SaveItemBtn;
    private javax.swing.JLabel Totallbl;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem loadMI;
    private javax.swing.JMenuItem saveMI;
    // End of variables declaration//GEN-END:variables
private Controller controller;

    public String headerPath ;
    public String ItemPath ;
    public ArrayList <InvoiceHeader> inv ;
    public ArrayList <Item> items;
    ;
    public void loadFile() {
       JFileChooser fc1 = new JFileChooser();
        if(fc1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            headerPath = fc1.getSelectedFile().getPath();
            File file = new File(headerPath);
            try{
                String line;
                BufferedReader br = new BufferedReader(new FileReader(file));
              int num=0;
              String name="" ;
              Date date=null ;   
             while ((line =br.readLine())!=null){
                 String[] dataRow = line.split(",");
                 num=Integer.parseInt(dataRow[0]);
                 name=dataRow[2];
                 date=new SimpleDateFormat("dd-MM-yyyy").parse((dataRow[1]));
                 InvoiceHeader header =new InvoiceHeader(num,name,date);
                 inv.add(header);
                 }
              DefaultTableModel model = (DefaultTableModel) InvoiceTable.getModel();
       
        Object rowData[] = new Object[4];
        for(int i = 0; i < inv.size(); i++)
        {
            rowData[0] = inv.get(i).getNum();
            rowData[1] = inv.get(i).getName();
            rowData[2] = inv.get(i).getDate();
            rowData[3] = inv.get(i).getTotal();
            model.addRow(rowData);
        }
       
            } catch (IOException ex) {
                ex.printStackTrace();
        }   catch (ParseException ex) {
                ex.printStackTrace();
            }
            
}      
        JFileChooser fc2 = new JFileChooser();

        if(fc2.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            ItemPath = fc2.getSelectedFile().getPath();
            File file2 = new File(ItemPath);
            try{
                String line2;
                BufferedReader br2 = new BufferedReader(new FileReader(file2));
               
                String name ;
                 int count;
                 double price;
                 while ((line2 =br2.readLine())!=null){
                     String[] dataRow2 = line2.split(",");
                     name=dataRow2[1];
                     price=Double.parseDouble(dataRow2[2]);
                     count=Integer.parseInt(dataRow2[3]);
                     Item item =new Item(name ,count ,price);
                     items.add(item);
                 }
                DefaultTableModel model2 = (DefaultTableModel) ItemTable.getModel();
                Object rowData2[] = new Object[4];
                for(int i = 0; i < items.size(); i++)
        {
            rowData2[0] = items.get(i).getName();
            rowData2[1] = items.get(i).getPrice();
            rowData2[2] = items.get(i).getCount();
            rowData2[3] = items.get(i).getTotal();
            model2.addRow(rowData2);
        }
                
       
            } catch (Exception ex) {
            ex.printStackTrace();
        }

}
    }
    
   
}
